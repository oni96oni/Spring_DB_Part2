데이터 접근 기술 - 테스트
    테스트 - 데이터베이스 연동
        데이터베이스에 연동하는 테스트?

        테스트를 실제 데이터베이스를 이용해서 해보자!

        테스트에서 중요한건 격리성!
        데이터가 깔끔해야 한다!!

        테스트 전용으로 데이터베이스를 분리해보자

    테스트 - 데이터베이스 분리
        로컬에서 사용하는 애플리케이션 서버와 테스트에서 같은 데이터베이스를 사용해서 문제가 발생!
        테스트를 다른 환경과 분리해야 한다

        가장 간단한 방법은 데이터베이스를 별도 운영하는것

        ★테스트에서 매우 중요한 원칙!!!
        테스트는 다른 테스트와 격리해야 한다.
        테스트는 반복해서 실행할 수 있어야 한다.

        테스트가 끝날때마다 delete를 사용해도 되지만 테스트가 많아지면 힘들다.
        궁극적인 해결책이 아니다.

        이럴때는 어떻게 문제를 해결?!

    테스트 - 데이터 롤백
        테스트가 끝나고 테스트에 사용된 데이터를 지울때 트랜잭션 - 롤백을 활용하자!
        오작동의 여지를 조금이라도 안 남길 수 있다.

        스프링 부트는 리소스 자동등록으로 인해서 적당한 트랜잭션 매니저를 자동으로 등록해준다.

        그런데 트랜잭션을 시작하고 롤백호출하는것이 살짝 귀찮다! 이런거는 어떻게 해결???

    테스트 - @Transactional
        테스트 데이터 초기화를 위해 트랜잭션을 적용하고 롤백하는 방식을 @Transactional을 사용하면 깔끔하게 해결된다.

        @Transactional 원리
            로직이 성공적으로 수행 - 커밋
            그런데 테스트에서 사용된다면 특별하게 동작!
            테스트를 트랜잭션 안에서 실행하고, 테스트가 끝나면 트랜잭션을 자동으로 롤백시켜버린다!
            데이터를 남겨놓는게 더 이상하기 때문!

            1. set auto commit false
            2. 로직을 실행
            3. assertThat()등으로 검증까지 끝낸다. ( 커밋을 안해도 내 트랜잭션이니까 select가 된다. )
            4. @Transactional이 테스트에 있으면 테스트가 끝날때 트랜잭션을 강제로 롤백

        보통 db 커넥션은 끊어지면 자동으로 롤백된다.
        동시에 여러 테스트 진행가능! 서로 영향을 주지 않기 떄문
        @Transactional 때문에 격리성과 반복의 원칙을 지킬 수 있다.

        @Commit, @Rollback(false) 를 넣으면 db에 커밋이 된다.
        내 눈으로 직접 결과를 보고 싶을때(insert 같은)

        db에 자료를 수정하는 테스트는 거의!! @Transactional 사용한다.

    테스트 - 임베디드 모드 DB
        테스트 케이스를 위해서 별도의 db 설치, 운영하는것은 상당히 번잡하다!
        이런한 귀찮은 작업을 줄이기 위해 스프링 부트는 임베디드 모드 DB를 지원한다.

        스프링 부트는 기본 sql스크립트를 사용해서 데이터베이스를 초기화하는 기능을 제공한다.
        메모리 db는 애플리케이션 종료시 함께 사라지기 때문에 실행시점에 테이블도 새로 만들어 주어야 한다.

        테스트이기 때문에 디비를 굳이 띄울필요가 없던것이다!
        메모리에 띄우고 확인하는것이 더 편리하다.

    테스트 - 스프링 부트와 임베디드 모드
        부트는 임베디드 데이터베이스에 대한 설정도 기본으로 제공

        ★application.properties와 빈 설정 정보를 아예 안주면 스프링부트가 임베디드 모드로 접근하는
        데이터 소스를 만들어서 제공한다.

        데이터소스 이름은 임의로 제공되는데 설정을 통해 고정 시킬 수 있다. (url 명)

        결론적으로는 @Transactional 하나만 붙이면 테스트 준비 완료!

    정리
        데이터 접근 기술은 데이터베이스에 연동하는것과 같이 학습이 이루어져야 한다.

        로컬db 하나에 테스트하면 데이터가 남아서 테스트 힘들어
        -> db를 나눔, 나누는건 좋았지만 delete는 여전히 위험
        -> 롤백기능, 위험요소 제거 하지만 코드가 많다
        -> @Transactional, 코드를 줄임 하지만 굳이 db를 띄울 필요가 없어!
        -> 임베디드 모드, 메모리에 db를 띄우고 테스트!
        -> 스프링 부트와 임베디드 모드, 스프링 부트가 임베디드 모드를 지원해줌!(설정을 알아서 해준다)

        우리가 안만들면 부트가 만들어준다. 우리는 @Transactional만 붙여도 되는 상황까지 올라왔다.