데이터 접근 기술 - 스프링 데이터 JPA
    스프링 데이터 JPA 소개 1 - 등장 이유

        EJB 매우 비싸고 어렵고 복잡 -> JPA 등장

        CRUD는 사실 다 비슷비슷한데 DB마다 조금씩 다른데...
        모든 DB 인터페이스 추출해서 비슷하게 만들면 어떨까? -> Java Persistence

        단순한 통합 그 이상!
        1. crud + 쿼리도 어느정도 제공
        2. 동일한 인터페이스
        3. 페이징 처리
        4. 매서드 이름으로 쿼리 생성
        5. 스프링 mvc에서 id값만 넘겨도 도메인 클래스로 바인딩

    스프링 데이터 JPA 소개 2 - 기능

        Spring Data Common 에서 jpa에서 쓸만한 기능을 추가한것! -> Spring Data JPA

        인터페이스만 있는데 구현체는? 구현 클래스 생성해준다(동적 프록시 기술)

        1. 메서드 이름으로 쿼리 생성
        2. @Query 등등
        3. 기본적인 crud

        '컴퓨터가 할일은 컴퓨터가 하도록'

        엔티티를 사용하면 왜 도메인 클래스를 중요하게 다루지???

        개발 장애의 90%는 DB! DB학습은 아무리 많아도 부족함이 없다.
        결국 복잡한건 직접 SQL 작성해야 한다.

        JPA 도입 전 이해도를 위해서
            본인이 작성한 JPQL이 어떤 쿼리로 생성 될지 이해해야 하는것이 필수!
            즉시, 지연 로딩 전략 이해
            영속성 컨텍스트 이해
            변경 감지
            영속성 컨텍스트는 언제 플러시되는가?
            연관관계 매핑중에 mappedBy(inverse)이해
            JQPL 한계 인식

    스프링 데이터 JPA 주요 기능
        결국 jpa를 편리하게 사용할 수 있도록 도와주는 라이브러리!

        1. 공통 인터페이스 기능
        2. 쿼리 메서드 기능

        1.
        인터페이스를 인터페이스 상속받고, 제네릭에 관리할 <엔티티, 엔티티id>를 주면 된다
        그러면 JpaRepository가 제공하는 기본 crud기능을 모두 사용할 수 있다.

        2.
        인터페이스에 메서드만 적어두면, 메서드 이름을 분석해서 쿼리를 자동으로 만들고 실행해주는 기능을 제공해준다.
        메서드 이름을 분석해서 JPQL을 만들고 실행해준다
        대신 규칙이 정해져 있으므로 규칙에 따라 작성해야 한다.

        쿼리메서드 기능대신 직접 JPQL을 사용하고싶을때는 @Query를 사용하면 된다.

    스프링 데이터 JPA 적용 1
        스프링 데이터 JPA가 제공하는 JpaRepository 인터페이스를 인터페이스 상속 받으면 기본적인 crud기능을 사용할 수 있다.

    스프링 데이터 JPA 적용 2
        스프링 데이터 JPA도 스프링 예외 추상화를 지원, 스프링 데이터 JPA가 만들어주는 프록시에서
        이미 예외 변환을 처리하기 때문에 @Repository를 사용할 필요가 없다.

    정리
        스프링 데이터 JPA는 똑같은 코드로 중복 개발하는 부분을 많이 개선해준다.
            예를 들어 어떤 부분???

