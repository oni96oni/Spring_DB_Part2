데이터 접근 기술 - MyBatis
    MyBatis 소개
        JdbcTemplate과 비슷, SQL을 XML에 편리하게 작성가능, 동적쿼리를 편하게 작성가능 하다는 장점이 있다.
        단점으로는 약간의 설정이 필요하다는것이 있다. 요즘엔 부트에서 마이바티스 모듈이 나와서 편리하게 사용가능

    MyBatis 설정
        gradle 설정에서 마이바티스만 뒤에 버전이 붙는 이유는 마이바티스는 스프링부트에서 기본적으로 제공하는 모듈이 아니기 때문이다.
        스프링에서 관리하는 애들만 뒤에 버전을 안적어도 알아서 버전관리를 해주는것!

        application.properties에서 설정정보 작성

    MyBatis 적용 1 - 기본
        xml에 코드를 작성한다.

        userGeneratedKeys="true" : 자동으로 생성된 키를 가져올 수 있다.
        데이터베이스가 키를 생성해주는 IDENTITY 전략일 때 사용

        keyProperty 는

        <where>태그는 모두 실패하면 sql을 만들지 않고 하나라도 성공하면 만들어주는데 처음 and는 where로 변환해준다!
        두번째는 and로 이어서

        CDATA 구문에서는 특수문자를 사용할 수 있다. 대신 XML TAG도 단순문자로 인식 IF,WHERE 적용되지 않는다.

    MyBatis 적용 2 - 설정과 실행
        ItemMapper 인터페이스를 구현한 MyBatisItemRepository는 스프링 빈으로 등록이
        되어야 하고 주로 위임하는 역할을 한다.

    MyBatis 적용 3 - 분석
        ItemMapper 인터페이스의 구현체가 없는데 어떻게 동작한 것일까?!

        인터페이스는 스프링빈으로 등록이 불가능하다!

        ★그러면 의존관계 주입은 어떻게???
        MyBatis 스프링 연동 모듈이 @Mapper를 조회해서 동적 프록시 객체를 생성! 구현체가 만들어지는데
        생성된 동적 프록시 객체를 스프링 빈으로 등록 합니다.

        데이터베이스 커넥션, 트랜잭션과 관련된 기능도 마이바티스와 함꼐 연동하고 동기화 해준다

    MyBatis 기능 정리 1 - 동적 쿼리
         <where>
         <foreach>


    MyBatis 기능 정리 2 - 기타 기능
        xml대신에 애노테이션으로 쿼리를 작성할 수 있다.
        잘 사용하지는 않는다! 동적 쿼리도 해결이 안되고, mybatis는 xml쓰기 편리하게하기 위함이라

        #{} 문법은 ?를 넣고 파라미터 바인딩하는 PreparedStatement를 사용한다!
        파라미터 바인딩이 아니라 문자 그대로를 처리하고 싶은 경우에는 ${}를 사용한다.
        하지만 ${}를 사용하면 sql인젝션 공격의 위험성이 있어서 가급적 사용x

        <sql>을 사용하면 SQL코드를 재사용할 수 있다.
        중복된 부분은 따로 뽑아서 가져올 수 있는것!

        컬럼명과 객체의 프로퍼티 명이 다르면 별칭을 사용하는데 resultMap을 선언해서 사용할 수도 있다.

        복잡한 결과 매핑
        <association>, <collection> 성능과 실효성에서 의문점이 남는다.

    정리
        여러줄 편리하게 작성, ★동적쿼리 편리

        매퍼를 만들고 xml을 매핑시키는데 매퍼이름을 인터페이스명으로 맞춰주어야 한다.

        xml 특수문자 주의, cdata로 대체 가능

        인터페이스 구현체를 만들어서 컨테이너에 빈으로 넣어주는것!