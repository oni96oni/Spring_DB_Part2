데이터 접근 기술 - 스프링 JdbcTemplate
    JdbcTemplate 소개와 설정
        장점
            설정의 편리함
            반복 문제 해결
        단점
            동적 SQL 처리의 어려움

    JdbcTemplate 적용 1 - 기본
        queryForObject()는결과 로우가 하나일 때 사용한다. 결과가 없거나, 둘 이상이면 예외가 발생한다.

        동적 쿼리란??? 왜 sql mapper는 동적으로 작성하기가 어려운가???

        JdbcTemplate을 사용할 때 생성자에 dataSource를 의존관계 주입받고 내부에서 JdbcTemplate을 생성하는데
        관례상 이 방법을 많이 사용한다.

        insert, update, delete 같이 데이터를 변경할때는 template.update()를 사용한다.

        PK인 아이디값을 개발자가 직접 지정하는것이 아니라
        비워두고 저장해야 데이터베이스가 대신 생성해서 넣어준다.

        itemRowMapper()는 데이터베이스의 조회결과를 객체로 변환할 때 사용한다.
        JDBC를 직접 사용할 때 ResultSet을 사용했던 부분과 비슷하다.

    JdbcTemplate 적용 2 - 동적 쿼리 문제
        ★findAll()에서 가장 어려운점은 사용자가 검색하는 값에 따라서 실행하는 sql이 동적으로 달라져야한다는점이다!!!

        결과적으로 2개의 검색조건이 있으므로 총 4가지 상황에 따른 sql을 동적으로 생성해야 한다.

        MyBatis의 가장 큰 장점은 동적 쿼리를 쉽게 작성할 수 있다!

    JdbcTemplate 적용 3 - 구성과 실행
        application.properties에 url,username,password를 입력하고
        ItemServiceApplication에서 @Import를 통해 JdbcTemplateConfig를 가져온다.
        이렇게 설정하면 스프링 부트가 해당 설정을 사용해서 커넥션 풀과 DataSource, 트랜잭션 매니저를 스프링 빈으로 자동 등록한다.

        로그를 보기위해 설정 정보를 추가할 수 있는데 main과 test 나뉜다!

    JdbcTemplate - 이름 지정 파라미터 1
        JdbcTemplate은 파라미터를 순서대로 바인딩한다.
        그런데 문제는 sql코드의 순서가 바뀌었을때 발생한다.

        개발을 할때는 코드를 줄이는 편리함도 중요하지만, 모호함을 제거해서 코드를 명확하게 만드는것이 유지보수 관점에서 매우 중요!!!

        이런 문제를 해결하기 위해 이름 지정 파라미터를 사용할 수 있다.
        NamedParameterJdbcTemplate을 사용하면 파라미터를 이름으로 바인딩할 수 있다.

        주입은 dataSource를 받고 실제 사용은 NamedParameterJdbcTemplate을 사용한다.

        ? 대신에 :parameter명 을 사용해서 받는다!

    JdbcTemplate - 이름 지정 파라미터 2
        파라미터를 전달하려면 map처럼 key, value구조를 만들어서 전달해야 한다!
        key는 :parameter명과 매핑되는 부분으로 value는 파라미터 값이다.

        이름 지정 파라미터에서 자주 사용하는 파라미터는
        1.Map
        2.SqlParameterSource
        2-1.BeanPropertySqlParameterSource
        2-2.MapSqlParameterSource

        1.Map
        단순하게 Map사용한다. Map.of로 간단하게 만들어서 쓴다.

        2.MapSqlParameterSource
        Map과 유사한데, sql타입을 지정할 수 있는 등 sql에 특화된 기능이 있다.

        3.BeanPropertySqlParameterSource
        자바빈 규약에 따라 만든 객체를 사용할 수 있다.
        많은것을 자동화해서 제일 좋은것 같지만 사용할 수 없는 부분도 있다!

        객체에 없는 멤버변수가 value값으로 필요할때! 대신 다른것을 사용해야한다.

        데이터베이스 컬럼 이름과 객체의 이름이 다를 때!
        별칭을 사용해서 sql 조회 결과의 이름을 바꾼다.

        관례의 불일치 문제
        자바는 카멜 표기법 vs rdbsm은 스네이크 표기법
        이런 관례로 인해 BeanPropertyRowMapper는 스네이크를 카멜로 자동변환해준다.

    JdbcTemplate - 이름 지정 파라미터 3
        @Import만 바꿔주면 된다!
        스프링 컨테이너에 올라가는 자바빈이 바뀌는것

    JdbcTemplate - SimpleJdbcInsert
        insert SQL을 직접 작성하지 않아도 되도록 SimpleJdbcInsert라는 편리한 기능을 제공한다.

        insert에서만 도움이 되는 기능! 나머지는 안된다.

        생성 시점에 데이터베이스 테이블의 메타 데이터를 조회한다. 따라서 어떤 컬럼이 있는지를 확인할 수 있으므로
        usingColumns을 생략할 수 있다. 특정 컬럼만 지정해서 저장하고 싶다면 usingColumns를 사용하면 된다.

    JdbcTemplate 기능 정리
        JdbcTemplate : 순서 기반 파라미터 바인딩
        NamedParameterJdbcTemplate : 이름 기반 파라미터 바인딩 (권장)
        SimpleJdbcInsert : insert용 편리 기능
        SimpleJdbcCall : 스토어드 프로시저를 편리하게 호출

        단건 조회(숫자 조회) queryForObject
            객체가 아니라 단순 데이터 하나면 타입을 지정해주면 된다 Integer.class 처럼

        단건 조회(객체 조회) queryForObject

        목록 조회(객체 조회) query
            queryForObject는 결과가 없으면 예외가 발생한다.
            query는 결과가 없으면 빈 컬렉션을 반환한다.

        변경(insert, update, delete)
            다 똑같이 update 메서드를 사용하면 된다.

        테이블을 생성하는 DDL에 사용할때 execute()

    정리
        ORM을 사용하면서 SQL을 직접 작성할때 JdbcTemplate을 사용하면 된다.
        동적쿼리 어려울때 MyBatis


